(defun play()
  (display-midi *last-score* :display :quick-view))
(defun show()
  (display-musicxml *last-score*))
(defun live()
  (live-coding-midi *last-score*)
  (show)
)
(defun preview ()
  (show)
  (play)
)

(defun glue (pitch length &optional (velocity nil) (articulation nil))
  (make-omn :pitch pitch :length length :velocity velocity :articulation articulation)
)


(defun simple-score (score &optional (tempo 120))
 (let ((index 0))
  (eval
   `(def-score simple-score 
      (:key-signature 'atonal
       :time-signature '(4 4)
       :tempo ,tempo)
      ,@(mapcar #'(lambda (part)
            (incf index)
            (list* (intern (concatenate 'string (string '#:inst-) (write-to-string index)))
                    :omn `(quote ,part) nil)
       )
        score)
    )
  )
 )
)
(defun simple-score-IAC (score &optional (tempo 120))
 (let ((index 0))
  (eval 
   `(def-score simple-score 
      (:key-signature 'atonal
       :time-signature '(4 4)
       :tempo ,tempo)
      ,@(mapcar #'(lambda (part)
            (incf index)
            (list* (intern (concatenate 'string (string '#:inst-) (write-to-string index)))
                    :omn `(quote ,part) :port (floor (/ (- index 1) 16)) :channel (+ 1 (mod (- index 1) 16)) nil)
       )
        score)
    )
  )
 )
)
(defun simple-score-grand (score &optional (tempo 120))
 (let ((index 0))
  (eval
   `(def-score simple-score-grand
      (:key-signature 'atonal
       :time-signature '(4 4)
       :tempo ,tempo
       :layout
 (loop for i from 1 to ,(length score)
  :collect (grand-layout (intern (concatenate 'string (string '#:inst-) (write-to-string i))))
 )
      )
      ,@(mapcar #'(lambda (part)
            (incf index)
            (list* (intern (concatenate 'string (string '#:inst-) (write-to-string index)))
                    :omn `(quote ,part) nil)
       )
        score)
    )
  )
 )
)


(defun simple-score-grand-IAC (score &optional (tempo 120))
 (let ((index 0))
  (eval
   `(def-score simple-score-grand
      (:key-signature 'atonal
       :time-signature '(4 4)
       :tempo ,tempo
       :layout
 (loop for i from 1 to ,(length score)
  :collect (grand-layout (intern (concatenate 'string (string '#:inst-) (write-to-string i))))
 )
      )
      ,@(mapcar #'(lambda (part)
            (incf index)
            (list* (intern (concatenate 'string (string '#:inst-) (write-to-string index)))
                    :omn `(quote ,part) :port 0 :channel index nil)
       )
        score)
    )
  )
 )
)
